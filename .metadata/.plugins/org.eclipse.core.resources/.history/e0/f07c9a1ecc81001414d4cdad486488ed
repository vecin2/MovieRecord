package tests;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JTextField;
import javax.swing.ListModel;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.netbeans.jemmy.operators.JButtonOperator;
import org.netbeans.jemmy.operators.JFrameOperator;
import org.netbeans.jemmy.operators.JLabelOperator;
import org.netbeans.jemmy.operators.JListOperator;
import org.netbeans.jemmy.operators.JTextFieldOperator;

import src.core.Movie;
import src.core.MovieListEditor;
import src.ui.MovieListEditorView;
import src.ui.SwingMovieListEditorView;

public class TestSwingMovieListEditorView {
	private JFrameOperator mainWindow;
	private Vector<Movie> movies = null;
	private Movie starWars = null;
	private Movie starTrek = null;
	private Movie stargate = null;
	private ArrayList<Movie> movieList = null;
	private MovieListEditorView mockEditor;
	@Before
	public void setUp() throws Exception {
		SwingMovieListEditorView.start();
		starWars = new Movie("Star Wars");
		starTrek = new Movie("Star Trek");
		stargate = new Movie("Stargate");
		movies = new Vector<Movie>();
		movies.add(starWars);
		movies.add(starTrek);
		movies.add(stargate);
		movieList = new ArrayList<Movie>();
		movieList.add(starWars);
		movieList.add(starTrek);
		movieList.add(stargate);
	}

	@After
	public void tearDown() throws Exception {
		mainWindow.dispose();
	}

	@Test
	public void testListContents() {
		mainWindow = new JFrameOperator("Movie List");
		MovieListEditor editor = new MovieListEditor(movieList,
				(SwingMovieListEditorView) mainWindow.getWindow());
		JListOperator movieList = new JListOperator(mainWindow);
		ListModel listModel = movieList.getModel();
		assertEquals("Movie list is the wrong size", movies.size(),
				listModel.getSize());
		for (int i = 0; i < movies.size(); i++) {
			assertEquals("Movie list contains bad movie at index " + i,
					movies.get(i), listModel.getElementAt(i));
		}
		try {
			System.in.read();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	//Test 8. The GUI should have a field for the movie name and an add button. It should answer the contents of
	//the name field when asked, and request that the logical layer add a movie when the add button is pushed.
	@Test
	public void testAdding(){
		Movie newMovie = new Movie("New Movie");
		movies.add(newMovie);
		mainWindow = new JFrameOperator("Movie List");
		MovieListEditor editor = new MovieListEditor(movieList,
				(SwingMovieListEditorView) mainWindow.getWindow());
		JTextFieldOperator movieField = new JLabelOperator(mainWindow);
		movieField.enterText("New Movie");	
		MovieListEditor mockEditor = mock(MovieListEditorView.class);
		//MovieListEditor editor = new MovieListEditor(movieList, mockView);
		verify(mockView).setMovies(movies);		
	}

}
