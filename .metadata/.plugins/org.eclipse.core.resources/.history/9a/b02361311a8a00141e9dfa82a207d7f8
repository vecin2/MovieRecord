package tests;

import java.util.ArrayList;
import java.util.Vector;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;

import src.core.Movie;
import src.core.MovieListEditor;
import src.ui.MovieListEditorView;

public class TestGUI {
	private MovieListEditorView mockView = null;
	private Vector<Movie> movies = null;
	private Movie starWars = null;
	private Movie starTrek = null;
	private Movie stargate = null;
	private ArrayList<Movie> movieList;
	private MovieListEditor editor;

	@Before
	public void setUp() {
		starWars = new Movie("Star Wars");
		starTrek = new Movie("Star Trek");
		stargate = new Movie("Stargate");
		movies = new Vector<Movie>();
		movies.add(starWars);
		movies.add(starTrek);
		movies.add(stargate);
		movieList = new ArrayList<Movie>();
		movieList.add(starWars);
		movieList.add(starTrek);
		movieList.add(stargate);
	}

	@Test
	public void testConstructorCallsViewWithListToDisplay() {
		verify(mockView).setMovies(movies);
	}

	/*
	 * Test 7. When the logical layer is asked to add a movie, it should request
	 * the required data from the view and update the movie list to include a
	 * new movie based on the data provided.
	 */
	@Test
	public void testAdd() {
		when(mockView.getMovieName()).thenReturn("New Movie");
		verify(mockView).setMovies(movies);

		editor.addMovie();

		movies.add(new Movie("New Movie"));
		verify(mockView).setMovies(movies);
	}

	/*
	 * Test 14. Indicating, to the logical layer, that a selection is made from
	 * the list causes the view to be given a value for the name field, that is,
	 * the selected movie's name.
	 */
	/* Rewrite to: */
	@Test
	public void testWhenMovieIsSelectedCallsSetMovieNameOnViewWithTheNameOfSelectedMovie() {
		editor.selectMovie(1);
		verify(mockView).setMovieName("Star Trek");
	}
	/*Test 16: When an update is requested, the selected movie is renamed to
	*whatever is answered by the view as the new name
	*/
	@Test
	public void testUpdate(){
		mockView = mock(MovieListEditorView.class);
		when(mockView.getMovieName()).thenReturn("New Movie");
		editor = new MovieListEditor(movieList, mockView);
		verify(mockView).setMovies(movies);
		
		Vector<Movie >newMovies = new Vector<Movie>();
		newMovies.add(starWars);
		Movie newMovie = new  Movie("New Movie");
		newMovies.add(newMovie);
		newMovies.add(stargate);
		
		editor.selectMovie(1);
		editor.updateMovie();
		
		verify(mockView, times(2)).setMovies(newMovies);
	}
}
